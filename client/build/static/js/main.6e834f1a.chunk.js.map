{"version":3,"sources":["components/InfoBox.js","components/util.js","components/Map.js","components/Table.js","components/LineGraph.js","components/Home.js","components/User.js","App.js","index.js"],"names":["InfoBox","type","title","cases","isGreen","isOrange","isRed","active","total","props","Card","onClick","className","CardContent","Typography","casesTypeColors","hex","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","maxZoom","attribution","map","country","Circle","key","lat","long","fillOpacity","color","fillColor","radius","Math","sqrt","Popup","continent","population","tests","critical","activePerOneMillion","recoveredPerOneMillion","criticalPerOneMillion","showDataOnMap","Table","states","state","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","time","parser","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","historical","useState","setData","bgColor","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","Home","countryInfo","setCountryInfo","setCountries","setCountry","setStates","worldTableData","setWorldTableData","statesTableData","setStatesTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","getAllData","toast","notify","name","iso2","sortedData","getCountriesData","getStatesData","onCountryChange","event","countryCode","target","to","FormControl","Select","variant","onChange","MenuItem","i","e","todayCases","todayRecovered","todayDeaths","User","setName","location","setLocation","body","setBody","posts","setPosts","loading","setLoading","getUserPosts","axios","get","setTimeout","reverse","console","log","catch","alert","resetForm","onSubmit","preventDefault","today","Date","payload","getMonth","getDate","getFullYear","getHours","getMinutes","getSeconds","method","err","required","placeholder","post","displayUserPosts","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e834f1a.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, CardContent, Typography } from '@material-ui/core';\nimport './InfoBox.css';\n\nfunction InfoBox({\n  type,\n  title,\n  cases,\n  isGreen,\n  isOrange,\n  isRed,\n  active,\n  total,\n  ...props\n}) {\n  return (\n    <Card\n      onClick={props.onClick}\n      className={`infoBox ${active && 'infoBox--selected'} ${\n        isOrange && 'infoBox--orange'\n      } ${isGreen && 'infoBox--green'} ${isRed && 'infoBox--red'}`}\n    >\n      <CardContent>\n        <Typography className=\"infoBox__title\">{title}</Typography>\n        <h2 className={'infoBox__total'}>{total}</h2>\n        <Typography className=\"infoBox__cases\">\n          {cases} New {type}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;\n","import React from 'react';\nimport numeral from 'numeral';\nimport { Circle, Popup } from 'react-leaflet';\n\nconst casesTypeColors = {\n  cases: {\n    hex: '#FFA500',\n  },\n  recovered: {\n    hex: '#7dd71d',\n  },\n  deaths: {\n    hex: '#fb4443',\n  },\n};\n\nexport const sortData = (data) => {\n  const sortedData = [...data];\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `${numeral(stat).format('0,0')}` : '0';\n\n// Draw circles on the map with interactive tooltip\nexport const showDataOnMap = (data, casesType = 'cases') =>\n  data.map((country) => (\n    <Circle\n      key={country.country}\n      center={[country.lat, country.long]}\n      fillOpacity={0.4}\n      color=\"white\"\n      fillColor={casesTypeColors[casesType].hex}\n      radius={Math.sqrt(country[casesType]) * 500}\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div className=\"info-name\">\n            {country.country} | {country.continent}\n          </div>\n          <div className=\"info-confirmed\">\n            Population: {numeral(country.population).format('0,0')}\n          </div>\n          <div className=\"info-deaths\">\n            Total Tests: {numeral(country.tests).format('0,0')}\n          </div>\n          <div className=\"info-confirmed\">\n            Active Cases: {numeral(country.active).format('0,0')}\n          </div>\n          <div className=\"info-recovered\">\n            Critical Cases: {numeral(country.critical).format('0,0')}\n          </div>\n          <div>---------------------------------------------</div>\n          <div className=\"info-recovered\">\n            Active / 1 Million:{' '}\n            {numeral(country.activePerOneMillion).format('0,0')}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered / 1 Million:{' '}\n            {numeral(country.recoveredPerOneMillion).format('0,0')}\n          </div>\n          <div className=\"info-recovered\">\n            Critical / 1 Million:{' '}\n            {numeral(country.criticalPerOneMillion).format('0,0')}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import React from 'react';\nimport './Map.css';\nimport { Map as LeafletMap, TileLayer } from 'react-leaflet';\nimport { showDataOnMap } from './util';\n\nfunction Map({ countries, casesType, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png\"\n          maxZoom=\"7\"\n          attribution=\"&copy; <a href=https://carto.com/>Carto</a> contributors\"\n        />\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Map;\n","import React from 'react';\nimport './Table.css';\nimport numeral from 'numeral';\n\nfunction Table({ countries, states }) {\n  if (countries) {\n    return (\n      <div className=\"table\">\n        <table>\n          <tbody>\n            {countries.map(({ country, cases }) => (\n              <tr key={country}>\n                <td>{country}</td>\n                <td>\n                  <strong>{numeral(cases).format('0,0')}</strong>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"table\">\n        <table>\n          <tbody>\n            {states.map(({ state, cases }) => (\n              <tr key={state}>\n                <td>{state}</td>\n                <td>\n                  <strong>{numeral(cases).format('0,0')}</strong>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Table;\n","import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport numeral from 'numeral';\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: 'index',\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format('+0,0');\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: 'time',\n        time: {\n          parser: 'MM/DD/YY',\n          tooltipFormat: 'll',\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format('0a');\n          },\n        },\n      },\n    ],\n  },\n};\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\nfunction LineGraph({ casesType, historical, ...props }) {\n  const [data, setData] = useState({});\n  var bgColor = '#fb4443';\n  if (casesType === 'cases') {\n    bgColor = '#ffa500';\n  } else if (casesType === 'recovered') {\n    bgColor = '#7dd71d';\n  }\n\n  useEffect(() => {\n    const url =\n      historical === 'all'\n        ? 'api/historical/all'\n        : 'api/historical/usa';\n\n    const fetchData = async () => {\n      await fetch(url)\n        .then((response) => response.json())\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n        });\n    };\n    fetchData();\n  }, [casesType, historical]);\n\n  return (\n    <div className={props.className}>\n      {data?.length > 0 && (\n        <Line\n          options={options}\n          data={{\n            datasets: [\n              {\n                backgroundColor: bgColor,\n                borderColor: '#fff',\n                data: data,\n              },\n            ],\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n","import React, { useState, useEffect } from 'react';\nimport './Home.css';\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from '@material-ui/core';\nimport toast from 'toasted-notes';\nimport 'toasted-notes/src/styles.css';\n\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport { sortData, prettyPrintStat } from './util';\n\nimport LineGraph from './LineGraph';\nimport 'leaflet/dist/leaflet.css';\nimport { Link } from 'react-router-dom';\n\nfunction Home() {\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [states, setStates] = useState([]);\n  const [worldTableData, setWorldTableData] = useState([]);\n  const [statesTableData, setStatesTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({\n    lat: 40.044438,\n    lng: -19.518099,\n  });\n  const [mapZoom, setMapZoom] = useState(2);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState('cases');\n\n  useEffect(() => {\n    const getAllData = async () => {\n      await fetch('api/all')\n        .then((response) => response.json())\n        .then((data) => setCountryInfo(data));\n    };\n    getAllData();\n    toast.notify(\n      'The information on this site may not be always up-to-date...\\nSorry for the inconvenience!'\n    );\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch('api/countries')\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.iso2,\n          }));\n          const sortedData = sortData(data);\n          setWorldTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  useEffect(() => {\n    const getStatesData = async () => {\n      await fetch('api/states')\n        .then((response) => response.json())\n        .then((data) => {\n          const sortedData = sortData(data);\n          setStatesTableData(sortedData);\n          setStates(states);\n        });\n    };\n    getStatesData();\n  }, [states]);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n\n    const url =\n      countryCode === 'worldwide'\n        ? 'api/all'\n        : `api/countries/code/${countryCode}`;\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        if (countryCode === 'worldwide') {\n          setMapCenter([40.044438, -19.518099]);\n          setMapZoom(2);\n        } else {\n          setMapCenter([data.lat, data.long]);\n        }\n      })\n      .then(setMapZoom(4));\n  };\n\n  return (\n    <div>\n      <div className=\"home\">\n        <Card className=\"table__left\">\n          <CardContent>\n            <h3 className=\"app__rightTableTitle\">\n              current confirmed cases • world\n            </h3>\n            <Table countries={worldTableData} />\n            <h3 className=\"app__rightGraphTitle\">\n              new daily {casesType} worldwide\n            </h3>\n            <LineGraph\n              className=\"app__graph\"\n              casesType={casesType}\n              historical=\"all\"\n            />\n          </CardContent>\n        </Card>\n        <div className=\"app__left\">\n          <div className=\"app__header\">\n            <h1>CoViz-19</h1>\n            <div className=\"right__nav\">\n              <Link className=\"user-link\" to=\"/user\">\n                User Dashboard\n              </Link>\n              <FormControl className=\"app__dropdown\">\n                <Select\n                  className=\"app__dropdown-name\"\n                  variant=\"outlined\"\n                  onChange={onCountryChange}\n                  value={country}\n                >\n                  <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n                  {countries.map((country, i) => (\n                    <MenuItem key={i} value={country.value}>\n                      {country.name}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </div>\n          </div>\n\n          <div className=\"app__stats\">\n            <InfoBox\n              isOrange\n              type=\"Cases\"\n              active={casesType === 'cases'}\n              onClick={(e) => setCasesType('cases')}\n              title=\"Total Cases\"\n              cases={prettyPrintStat(countryInfo.todayCases)}\n              total={prettyPrintStat(countryInfo.cases)}\n            />\n            <InfoBox\n              isGreen\n              type=\"Recovered\"\n              active={casesType === 'recovered'}\n              onClick={(e) => setCasesType('recovered')}\n              title=\"Total Recovered\"\n              cases={prettyPrintStat(countryInfo.todayRecovered)}\n              total={prettyPrintStat(countryInfo.recovered)}\n            />\n            <InfoBox\n              isRed\n              type=\"Deaths\"\n              active={casesType === 'deaths'}\n              onClick={(e) => setCasesType('deaths')}\n              title=\"Total Deaths\"\n              cases={prettyPrintStat(countryInfo.todayDeaths)}\n              total={prettyPrintStat(countryInfo.deaths)}\n            />\n          </div>\n\n          <Map\n            casesType={casesType}\n            countries={mapCountries}\n            center={mapCenter}\n            zoom={mapZoom}\n          />\n        </div>\n        <Card className=\"table__right\">\n          <CardContent>\n            <h3 className=\"app__rightTableTitle\">\n              current confirmed cases • US\n            </h3>\n            <Table states={statesTableData} />\n            <h3 className=\"app__rightGraphTitle\">\n              new daily {casesType} nationwide\n            </h3>\n            <LineGraph\n              className=\"app__graph\"\n              casesType={casesType}\n              historical=\"usa\"\n            />\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport './User.css';\nimport { Link } from 'react-router-dom';\nimport Loader from 'react-loader-spinner';\nimport axios from 'axios';\n\nfunction User() {\n  const [name, setName] = useState('');\n  const [location, setLocation] = useState('');\n  const [body, setBody] = useState('');\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    getUserPosts();\n  }, []);\n\n  const getUserPosts = () => {\n    setLoading(true);\n    axios\n      .get('api/user')\n      .then((response) => {\n        const data = response.data;\n        setTimeout(() => {\n          setPosts(data.reverse());\n          setLoading(false);\n        }, 1850);\n\n        console.log('Data has been received!!');\n      })\n      .catch(() => {\n        alert('Error retrieving data!!!');\n      });\n  };\n\n  const submit = (event) => {\n    event.preventDefault();\n\n    const today = new Date();\n    const date =\n      today.getMonth() + 1 + '/' + today.getDate() + '/' + today.getFullYear();\n    const time =\n      today.getHours() + ':' + today.getMinutes() + ':' + today.getSeconds();\n\n    const payload = {\n      date: date,\n      time: time,\n      name: name,\n      location: location,\n      body: body,\n    };\n\n    axios({\n      url: 'api/user',\n      method: 'POST',\n      data: payload,\n    })\n      .then(() => {\n        resetForm();\n        getUserPosts();\n      })\n      .catch((err) => {\n        console.log('Internal server error', err);\n      });\n  };\n\n  const displayUserPosts = (posts) => {\n    if (!posts.length) return null;\n\n    return posts.map((post, index) => (\n      <div key={index} className=\"blog-post__display\">\n        <div className=\"left\">\n          <div className=\"name\">\n            <h3>\n              {post.location} | {post.date}\n            </h3>\n            <h4>@{post.name}</h4>\n          </div>\n        </div>\n\n        <div className=\"post\">\n          <p>{post.body}</p>\n        </div>\n      </div>\n    ));\n  };\n\n  const resetForm = () => {\n    setName('');\n    setLocation('');\n    setBody('');\n  };\n\n  return (\n    <div className=\"user\">\n      <div className=\"user__nav\">\n        <h1>User Dashboard</h1>\n\n        <div className=\"right__nav-two\">\n          <Link className=\"user-link-back\" to=\"/\">\n            Back To Home\n          </Link>\n        </div>\n      </div>\n      <div className=\"form\">\n        <form onSubmit={submit}>\n          <div className=\"form-input\">\n            <input\n              required=\"true\"\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n            />\n\n            <input\n              required=\"true\"\n              type=\"text\"\n              name=\"location\"\n              placeholder=\"Location\"\n              value={location}\n              onChange={(e) => setLocation(e.target.value)}\n            />\n\n            <textarea\n              required=\"true\"\n              type=\"text\"\n              name=\"body\"\n              placeholder=\"How's Covid-19 situation in your area?\"\n              value={body}\n              onChange={(e) => setBody(e.target.value)}\n            ></textarea>\n          </div>\n\n          <button className=\"btn\">\n            {loading && (\n              <Loader className=\"loading\" type=\"ThreeDots\" color=\"#fff\" />\n              // <Loading />\n            )}\n            {!loading && 'Submit'}\n          </button>\n        </form>\n      </div>\n\n      <div className=\"blog-\">{displayUserPosts(posts)}</div>\n    </div>\n  );\n}\n\nexport default User;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Home from './components/Home';\nimport User from './components/User';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/user\" component={User} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}